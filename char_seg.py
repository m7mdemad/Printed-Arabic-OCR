# -*- coding: utf-8 -*-
"""pattern project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tzWVHZ_ytFrF0MqWmeh74M2aAlOlnnWZ
"""

import cv2
import numpy as np
import time
import math
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
def horizintal_projection(img):
    im = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    im = 255 - im                               # invert
    projection = np.sum(im, 1) 
    coordinates=np.argmax(projection) 
    return projection,coordinates

def vertical_projection(img):
    im = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    im = 255 - im                               # invert
    projection = np.sum(im, 0) 
    return projection
    

def hist_filter(projection,bin_sizefactor=0.2):
  bin_size=max(1,int(len(projection)*bin_sizefactor))
  bins_no=int(len(projection)/bin_size)+(len(projection)%bin_size)-1
  groups=[]
  argmaxs=[]
  for i in range(0,int(len(projection)/bin_size)):
    proj=projection[i*bin_size:i*bin_size+bin_size]
    if(proj.size!=0):
      group=np.min(proj)
      groups.append(group)
      argmaxs.append(np.argmin(projection[i*bin_size:i*bin_size+bin_size])+bin_size*i)

  if((len(projection)%bin_size)!=0):
    remain=len(projection)%bin_size
    proj=projection[i*bin_size:i*bin_size+remain]
    if(proj.size!=0):
      group=np.min(proj)
      groups.append(group)
      argmaxs.append(np.argmin(projection[i*bin_size:i*bin_size+remain])+bin_size*i)
  
  plt.bar(argmaxs,groups)
  plt.show()
  return argmaxs






def Trim(projection, image, tolerance, min_accepted):
    lines = []
    i = 0
    while i < len(projection):
        if projection[i] != 0:
            count = 0
            start = i
            end = i
            threshold = 0
            while end < len(projection) and threshold <= tolerance:
                end += 1
                count += 1
                if end < len(projection) and projection[end] == 0:
                    threshold += 1

            if count > min_accepted: lines.append(image[start:end, 0:len(image[0])])
            i = end

        else:
            i += 1

    return lines



def Trim_char(cutoffs, image, tolerance=0):
    chars=[]
    cutoffs.insert(-1,image.shape[1]-1)
    for c in range(1,len(cutoffs)):
        crop=image[:,cutoffs[c-1]:cutoffs[c]+tolerance]
        chars.append(crop)
    return chars



def get_words(lines):
    Lines_in_words = []
    writer = 0
    for i in range(len(lines)):
        lines[i] = cv2.rotate(lines[i], cv2.ROTATE_90_COUNTERCLOCKWISE)
        temp,_=horizintal_projection(lines[i])
        words = Trim(temp, lines[i], 4, 5)
        for k in range(len(words)):
            words[k] = cv2.rotate(words[k], cv2.ROTATE_90_CLOCKWISE)

        Lines_in_words.append(words)
		
		# for visualization
        for j in range(len(words)):
            name = 'w' + str(writer) + '.png'
            cv2.imwrite(name, words[j])
            writer += 1




def get_chars(words):
  word_writer=0
  writer = 0
  words=words[::-1]
  for i in range(len(words)):
        proj=vertical_projection(words[i])
        cutoffs=hist_filter(proj)
        chars = Trim_char(cutoffs,words[i])
        chars=chars[::-1]
		# for visualization

  imgs_path=[[]  for i in range(len(words))]
  for i in range(0,len(words)):
     #cv2_imshow(words[0])
     word_writer+=1
     writer=0
     for j in range(0,len(chars)):
              name = 'w'+str(word_writer)+'c' + str(writer) + '.png'
              imgs_path[i].append(name)
              cv2.imwrite(name,chars[j])
              writer += 1
              #cv2_imshow(chars[j])
  return imgs_path

img = cv2.imread('image.png')
#Extract Lines from text
text_lines,coord=horizintal_projection(img)
lines = Trim(text_lines, img, 0, 15)
#Extract words from lines
words = get_words(lines)

#Extract charachters
img1=cv2.imread('w1.png')
img2=cv2.imread('w2.png')
imgs_paths=get_chars([img1,img2])

#prepare dataset
import pandas as pd
def make_labels(filename):
  with open(filename,'r') as f:
    lines=f.readlines()
    for line in lines:
      words=line.split()
    chars=[ [] for i in range(len(words)) ]
    for i in range(0,len(words)):
      for j in range(0,len(words[i])):
        chars[i].append(words[i][j])
    return chars

def prepare_dataset(imgs,chars):
  imgs=[j for sub in imgs for j in sub]
  chars=[k for sub2 in chars for k in sub2]
  
  data=[[] for i in range(len(imgs))]
  k=0
  for i in range(len(chars)):
    if(k<len(imgs)):
      img=imgs[k]
      k+=1
      data[i]=[img,chars[i]]
  df = pd.DataFrame(data, columns = ['img', 'label']) 
  df.to_csv('train.csv')
  return df

chars=make_labels('text.txt')
chars=[chars[2],chars[3]]
print(chars)
prepare_dataset(imgs_paths,chars)

import sklearn